# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'APK.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sqlite3

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox


class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(600, 300)
        Form.setStyleSheet("background-color:rgb(245, 210, 255);\n"
"")
        self.label_heding = QtWidgets.QLabel(Form)
        self.label_heding.setGeometry(QtCore.QRect(100, 20, 121, 21))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_heding.setFont(font)
        self.label_heding.setStyleSheet("color:rgb(85, 0, 0)")
        self.label_heding.setObjectName("label_heding")
        self.groupBox = QtWidgets.QGroupBox(Form)
        self.groupBox.setGeometry(QtCore.QRect(10, 60, 331, 111))
        self.groupBox.setStyleSheet("QGroupBox {border:2px solid Black;};")
        self.groupBox.setTitle("")
        self.groupBox.setObjectName("groupBox")
        self.label_2 = QtWidgets.QLabel(self.groupBox)
        self.label_2.setGeometry(QtCore.QRect(10, 10, 91, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.groupBox)
        self.label_3.setGeometry(QtCore.QRect(10, 40, 91, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.groupBox)
        self.label_4.setGeometry(QtCore.QRect(10, 70, 81, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.lineEdit_CCode = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_CCode.setEnabled(False)
        self.lineEdit_CCode.setGeometry(QtCore.QRect(100, 10, 81, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_CCode.setFont(font)
        self.lineEdit_CCode.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.lineEdit_CCode.setReadOnly(True)
        self.lineEdit_CCode.setObjectName("lineEdit_CCode")
        self.lineEdit_RCode = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_RCode.setEnabled(False)
        self.lineEdit_RCode.setGeometry(QtCore.QRect(100, 40, 81, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_RCode.setFont(font)
        self.lineEdit_RCode.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.lineEdit_RCode.setReadOnly(True)
        self.lineEdit_RCode.setObjectName("lineEdit_RCode")
        self.lineEdit_APKName = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_APKName.setEnabled(False)
        self.lineEdit_APKName.setGeometry(QtCore.QRect(190, 70, 121, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_APKName.setFont(font)
        self.lineEdit_APKName.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.lineEdit_APKName.setObjectName("lineEdit_APKName")
        self.lineEdit_APKCode = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_APKCode.setEnabled(False)
        self.lineEdit_APKCode.setGeometry(QtCore.QRect(100, 70, 81, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_APKCode.setFont(font)
        self.lineEdit_APKCode.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.lineEdit_APKCode.setObjectName("lineEdit_APKCode")
        self.CB_CName = QtWidgets.QComboBox(self.groupBox)
        self.CB_CName.setGeometry(QtCore.QRect(190, 10, 121, 22))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.CB_CName.setFont(font)
        self.CB_CName.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.CB_CName.setObjectName("CB_CName")
        self.CB_RName = QtWidgets.QComboBox(self.groupBox)
        self.CB_RName.setGeometry(QtCore.QRect(190, 40, 121, 22))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.CB_RName.setFont(font)
        self.CB_RName.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.CB_RName.setObjectName("CB_RName")
        self.btnAdd = QtWidgets.QPushButton(Form)
        self.btnAdd.setGeometry(QtCore.QRect(10, 200, 51, 23))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.btnAdd.setFont(font)
        self.btnAdd.setStyleSheet("background-color:#90EE90")
        self.btnAdd.setObjectName("btnAdd")
        self.btnModify = QtWidgets.QPushButton(Form)
        self.btnModify.setGeometry(QtCore.QRect(70, 200, 61, 23))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.btnModify.setFont(font)
        self.btnModify.setStyleSheet("background-color:#90EE90")
        self.btnModify.setObjectName("btnModify")
        self.btnSave = QtWidgets.QPushButton(Form)
        self.btnSave.setGeometry(QtCore.QRect(140, 200, 61, 23))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.btnSave.setFont(font)
        self.btnSave.setStyleSheet("background-color:#90EE90")
        self.btnSave.setObjectName("btnSave")
        self.btnDelete = QtWidgets.QPushButton(Form)
        self.btnDelete.setGeometry(QtCore.QRect(210, 200, 61, 23))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.btnDelete.setFont(font)
        self.btnDelete.setStyleSheet("background-color:#90EE90")
        self.btnDelete.setObjectName("btnDelete")
        self.btnExit = QtWidgets.QPushButton(Form)
        self.btnExit.setGeometry(QtCore.QRect(280, 200, 61, 23))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.btnExit.setFont(font)
        self.btnExit.setStyleSheet("background-color:#90EE90")
        self.btnExit.setObjectName("btnExit")
        self.label_list = QtWidgets.QLabel(Form)
        self.label_list.setGeometry(QtCore.QRect(360, 20, 191, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_list.setFont(font)
        self.label_list.setStyleSheet("QLabel { border: 1px solid Black;};")
        self.label_list.setAlignment(QtCore.Qt.AlignCenter)
        self.label_list.setObjectName("label_list")
        self.lineEdit_Search = QtWidgets.QLineEdit(Form)
        self.lineEdit_Search.setGeometry(QtCore.QRect(360, 40, 191, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_Search.setFont(font)
        self.lineEdit_Search.setStyleSheet("background-color:rgb(203, 203, 255)")
        self.lineEdit_Search.setObjectName("lineEdit_Search")
        self.listWidget = QtWidgets.QListWidget(Form)
        self.listWidget.setGeometry(QtCore.QRect(360, 60, 191, 221))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.listWidget.setFont(font)
        self.listWidget.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.listWidget.setObjectName("listWidget")

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)
        self.View_data()
        self.Center()
        self.CB_CName.highlighted[str].connect(self.refreshcombo)
        self.CB_CName.currentIndexChanged.connect(self.selectCenter)
        self.Route()
        self.CB_RName.highlighted[str].connect(self.refreshcombo1)
        self.CB_RName.currentIndexChanged.connect(self.selectRoute)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Mobile APK"))
        self.label_heding.setText(_translate("Form", "Mobile APK"))
        self.label_2.setText(_translate("Form", "Center Code :"))
        self.label_3.setText(_translate("Form", "Route Code :"))
        self.label_4.setText(_translate("Form", "APK Code :"))
        self.lineEdit_CCode.setPlaceholderText(_translate("Form", "New"))
        self.lineEdit_RCode.setPlaceholderText(_translate("Form", "New"))
        self.lineEdit_APKName.setPlaceholderText(_translate("Form", "Name"))
        self.lineEdit_APKCode.setPlaceholderText(_translate("Form", "New"))
        self.btnAdd.setText(_translate("Form", "Add"))
        self.btnModify.setText(_translate("Form", "Modify"))
        self.btnSave.setText(_translate("Form", "Save"))
        self.btnDelete.setText(_translate("Form", "Delete"))
        self.btnExit.setText(_translate("Form", "Exit"))
        self.label_list.setText(_translate("Form", "List"))
        self.lineEdit_Search.setPlaceholderText(_translate("Form", "Search"))

        self.listWidget.clicked.connect(self.selectionChanged)
        self.lineEdit_Search.textChanged.connect(self.filterlist)
        self.btnDelete.clicked.connect(self.Delete_data)
        self.btnAdd.clicked.connect(self.add_data)
        self.btnSave.clicked.connect(self.save_data)
        self.btnModify.clicked.connect(self.Update_data)
        self.btnExit.clicked.connect(QtWidgets.qApp.quit)

    def save_data(self):
        self.lineEdit_APKName.setFocus(True)
        lineEdit_APKCode = self.lineEdit_APKCode.text()
        Code = self.listWidget.count()
        if Code == 0:
            Code = 1
        else:
            Code = Code + 1
        lineEdit_APKName = self.lineEdit_APKName.text()
        if lineEdit_APKCode == '' and lineEdit_APKName == '':
            # Create the dialog without running it yet
            msgBox = QMessageBox()

            # Set the various texts
            msgBox.setWindowTitle("Information")
            msgBox.setText(
                "No entry '" + str(lineEdit_APKCode) + " " + str(
                    lineEdit_APKName) + "'.Would you like to add it to the database")
            msgBox.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
            msgBox.setDefaultButton(QMessageBox.No)

            # Run the dialog, and check results
            bttn = msgBox.exec_()
            if bttn == QMessageBox.Yes:
                return True
            else:
                return False
        else:
            conn = sqlite3.connect('D:\Internship\ERP_Info\ERP_Info.db')
            cur = conn.cursor()
            cur.execute('INSERT INTO MobileAPK (APKcode,APKname) \
                                                    VALUES (?,?)', (Code, lineEdit_APKName))

            conn.commit()
            print("Records Inserted successfully")
            conn.close()
            self.View_data()
            self.lineEdit_APKName.clear()
            self.lineEdit_APKCode.clear()
            self.lineEdit_APKName.setFocus()

    def filterlist(self):
        self.listWidget.clear()

    def add_data(self):
        self.lineEdit_APKName.setEnabled(True)
        self.lineEdit_APKName.setFocus()
        lastcode = self.listWidget.count()
        code = lastcode + 1
        print(code)
        self.lineEdit_APKCode.setText(str(code))

    def View_data(self):

        conn = sqlite3.connect('D:\Internship\ERP_Info\ERP_Info.db')
        cur = conn.cursor()
        cur.execute('select APKname from MobileAPK')
        hu = cur.fetchall()
        self.listWidget.clear()
        for i in range(len(hu)):
            item = QtWidgets.QListWidgetItem(hu[i][0])
            self.listWidget.addItem(item)

        conn.commit()
        print("Records Displayed successfully")
        conn.close()

    def Update_data(self):
        self.lineEdit_APKName.setEnabled(True)
        lineEdit_APKCode = self.lineEdit_APKCode.text()
        lineEdit_APKName = self.lineEdit_APKName.text()
        conn = sqlite3.connect('D:\Internship\ERP_Info\ERP_Info.db')
        cur = conn.cursor()
        cur.execute("UPDATE MobileAPK SET APKname = ? WHERE APKcode = ?", (lineEdit_APKName, lineEdit_APKCode))

        conn.commit()
        print("Records Modified successfully")
        conn.close()
        self.View_data()

    def Delete_data(self):
        self.lineEdit_APKCode.setFocus()
        lineEdit_APKCode = self.lineEdit_APKCode.text()
        conn = sqlite3.connect('D:\Internship\ERP_Info\ERP_Info.db')
        cur = conn.cursor()
        cur.execute("DELETE FROM MobileAPK WHERE APKcode=?", (lineEdit_APKCode))
        conn.commit()
        print("Records Deleted successfully")
        conn.close()
        self.View_data()
        self.lineEdit_APKName.clear()
        self.lineEdit_APKCode.clear()

    def selectionChanged(self):
        self.lineEdit_APKName.setEnabled(False)
        name = self.listWidget.currentItem()
        cname = (name.text())
        self.lineEdit_APKName.setText(name.text())
        conn = sqlite3.connect('D:\Internship\ERP_Info\ERP_Info.db')
        cur = conn.cursor()
        cur.execute("SELECT APKcode FROM MobileAPK WHERE APKname=?", (cname,))
        result = cur.fetchone()
        # print(result)
        # print(type(result))
        res = int(''.join(map(str, result)))
        self.lineEdit_APKCode.setText(str(res))
        conn.commit()
        # print("Code Displayed successfully")
        conn.close()

    def selectCenter(self):
        name = self.CB_CName.currentText()
        index = self.CB_CName.currentIndex()

        conn = sqlite3.connect('D:\Internship\ERP_Info\ERP_Info.db')
        cur = conn.cursor()
        cur.execute("SELECT Code FROM CenterDB WHERE Name=?", (name,))
        result = cur.fetchone()
        res = int(''.join(map(str, result)))
        self.lineEdit_CCode.setText(str(res))
        conn.commit()
        conn.close()

    def Center(self):
        conn = sqlite3.connect('D:\Internship\ERP_Info\ERP_Info.db')
        c = conn.cursor()
        c.execute("SELECT Name FROM CenterDB")
        List = c.fetchall()
        # print(List)
        self.CB_CName.clear()
        for i in range(len(List)):
            self.CB_CName.addItem(List[i][0])
            # print(row)
        conn.commit()
        conn.close()

    def refreshcombo(self):
        count = self.CB_CName.count()
        conn = sqlite3.connect('D:\Internship\ERP_Info\ERP_Info.db')
        cur = conn.cursor()
        cur.execute('SELECT * FROM CenterDB')
        result = cur.fetchall()
        # print(len(result))
        conn.commit()
        conn.close()
        a = count
        b = len(result)
        # print(result)
        if a != b:
            self.Center()
            return

    def selectRoute(self):
        name = self.CB_RName.currentText()
        index = self.CB_RName.currentIndex()

        conn = sqlite3.connect('D:\Internship\ERP_Info\ERP_Info.db')
        cur = conn.cursor()
        cur.execute("SELECT Code FROM RouteDB WHERE Name=?", (name,))
        result = cur.fetchone()
        res = int(''.join(map(str, result)))
        self.lineEdit_RCode.setText(str(res))
        conn.commit()
        conn.close()

    def Route(self):
        conn = sqlite3.connect('D:\Internship\ERP_Info\ERP_Info.db')
        c = conn.cursor()
        c.execute("SELECT Name FROM RouteDB")
        List = c.fetchall()
        # print(List)
        self.CB_RName.clear()
        for i in range(len(List)):
            self.CB_RName.addItem(List[i][0])
            # print(row)
        conn.commit()
        conn.close()

    def refreshcombo1(self):
        count = self.CB_RName.count()
        conn = sqlite3.connect('D:\Internship\ERP_Info\ERP_Info.db')
        cur = conn.cursor()
        cur.execute('SELECT * FROM RouteDB')
        result = cur.fetchall()
        # print(len(result))
        conn.commit()
        conn.close()
        a = count
        b = len(result)
        # print(result)
        if a != b:
            self.Route()
            return
if __name__=="__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    widget = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(widget)
    widget.show()
    sys.exit(app.exec_())