# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'DataMchn.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sqlite3

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox


class Ui_DataMchnInfo(object):
    def setupUi(self, DataMchnInfo):
        DataMchnInfo.setObjectName("DataMchnInfo")
        DataMchnInfo.resize(600, 300)
        font = QtGui.QFont()
        font.setPointSize(10)
        DataMchnInfo.setFont(font)
        DataMchnInfo.setStyleSheet("background-color:rgb(245, 210, 255);\n"
"")
        self.groupBox = QtWidgets.QGroupBox(DataMchnInfo)
        self.groupBox.setGeometry(QtCore.QRect(10, 70, 361, 131))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox.setFont(font)
        self.groupBox.setStyleSheet("QGroupBox { border: 2px solid Black;};")
        self.groupBox.setTitle("")
        self.groupBox.setAlignment(QtCore.Qt.AlignCenter)
        self.groupBox.setObjectName("groupBox")
        self.label_CCode = QtWidgets.QLabel(self.groupBox)
        self.label_CCode.setGeometry(QtCore.QRect(10, 30, 91, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_CCode.setFont(font)
        self.label_CCode.setObjectName("label_CCode")
        self.label_2 = QtWidgets.QLabel(self.groupBox)
        self.label_2.setGeometry(QtCore.QRect(230, 80, 44, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        self.lineEdit_CCode = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_CCode.setEnabled(False)
        self.lineEdit_CCode.setGeometry(QtCore.QRect(120, 30, 91, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_CCode.setFont(font)
        self.lineEdit_CCode.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.lineEdit_CCode.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.lineEdit_CCode.setReadOnly(True)
        self.lineEdit_CCode.setObjectName("lineEdit_CCode")
        self.labelRCode = QtWidgets.QLabel(self.groupBox)
        self.labelRCode.setGeometry(QtCore.QRect(10, 60, 91, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.labelRCode.setFont(font)
        self.labelRCode.setObjectName("labelRCode")
        self.labelDCode = QtWidgets.QLabel(self.groupBox)
        self.labelDCode.setGeometry(QtCore.QRect(10, 90, 111, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.labelDCode.setFont(font)
        self.labelDCode.setObjectName("labelDCode")
        self.lineEdit_RCode = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_RCode.setEnabled(False)
        self.lineEdit_RCode.setGeometry(QtCore.QRect(122, 60, 91, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_RCode.setFont(font)
        self.lineEdit_RCode.setStyleSheet("background-color:rgb(255, 255, 255);")
        self.lineEdit_RCode.setReadOnly(True)
        self.lineEdit_RCode.setObjectName("lineEdit_RCode")
        self.lineEdit_DCode = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_DCode.setEnabled(False)
        self.lineEdit_DCode.setGeometry(QtCore.QRect(122, 90, 91, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_DCode.setFont(font)
        self.lineEdit_DCode.setStyleSheet("background-color:rgb(255, 255, 255);")
        self.lineEdit_DCode.setObjectName("lineEdit_DCode")
        self.lineEdit_DName = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_DName.setEnabled(False)
        self.lineEdit_DName.setGeometry(QtCore.QRect(220, 90, 131, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_DName.setFont(font)
        self.lineEdit_DName.setStyleSheet("background-color:rgb(255, 255, 255);")
        self.lineEdit_DName.setObjectName("lineEdit_DName")
        self.CB_CName = QtWidgets.QComboBox(self.groupBox)
        self.CB_CName.setGeometry(QtCore.QRect(220, 30, 131, 22))
        self.CB_CName.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.CB_CName.setObjectName("CB_CName")
        self.CB_RName = QtWidgets.QComboBox(self.groupBox)
        self.CB_RName.setGeometry(QtCore.QRect(220, 60, 131, 22))
        self.CB_RName.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.CB_RName.setObjectName("CB_RName")
        self.btnAdd = QtWidgets.QPushButton(DataMchnInfo)
        self.btnAdd.setGeometry(QtCore.QRect(10, 230, 61, 23))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.btnAdd.setFont(font)
        self.btnAdd.setStyleSheet("background-color:#90EE90")
        self.btnAdd.setObjectName("btnAdd")
        self.btnModify = QtWidgets.QPushButton(DataMchnInfo)
        self.btnModify.setGeometry(QtCore.QRect(80, 230, 61, 23))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.btnModify.setFont(font)
        self.btnModify.setStyleSheet("background-color:#90EE90")
        self.btnModify.setObjectName("btnModify")
        self.btnSave = QtWidgets.QPushButton(DataMchnInfo)
        self.btnSave.setGeometry(QtCore.QRect(150, 230, 61, 23))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.btnSave.setFont(font)
        self.btnSave.setStyleSheet("background-color:#90EE90")
        self.btnSave.setObjectName("btnSave")
        self.btnDelete = QtWidgets.QPushButton(DataMchnInfo)
        self.btnDelete.setGeometry(QtCore.QRect(220, 230, 61, 23))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.btnDelete.setFont(font)
        self.btnDelete.setStyleSheet("background-color:#90EE90")
        self.btnDelete.setObjectName("btnDelete")
        self.btnExit = QtWidgets.QPushButton(DataMchnInfo)
        self.btnExit.setGeometry(QtCore.QRect(290, 230, 61, 23))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.btnExit.setFont(font)
        self.btnExit.setStyleSheet("background-color:#90EE90")
        self.btnExit.setObjectName("btnExit")
        self.labelHeding = QtWidgets.QLabel(DataMchnInfo)
        self.labelHeding.setGeometry(QtCore.QRect(60, 10, 271, 41))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.labelHeding.setFont(font)
        self.labelHeding.setStyleSheet("color:rgb(85, 0, 0);")
        self.labelHeding.setAlignment(QtCore.Qt.AlignCenter)
        self.labelHeding.setObjectName("labelHeding")
        self.labelList = QtWidgets.QLabel(DataMchnInfo)
        self.labelList.setGeometry(QtCore.QRect(400, 10, 181, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.labelList.setFont(font)
        self.labelList.setStyleSheet("QLabel { border: 1px solid Black;};")
        self.labelList.setAlignment(QtCore.Qt.AlignCenter)
        self.labelList.setObjectName("labelList")
        self.lineEdit_Search = QtWidgets.QLineEdit(DataMchnInfo)
        self.lineEdit_Search.setGeometry(QtCore.QRect(400, 30, 181, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_Search.setFont(font)
        self.lineEdit_Search.setStyleSheet("background-color:rgb(194, 205, 255)")
        self.lineEdit_Search.setObjectName("lineEdit_Search")
        self.listWidget = QtWidgets.QListWidget(DataMchnInfo)
        self.listWidget.setGeometry(QtCore.QRect(400, 50, 181, 231))
        self.listWidget.setStyleSheet("background-color:rgb(255, 255, 255);")
        self.listWidget.setObjectName("listWidget")

        self.retranslateUi(DataMchnInfo)
        QtCore.QMetaObject.connectSlotsByName(DataMchnInfo)
        self.View_data()
        self.Center()
        self.CB_CName.highlighted[str].connect(self.refreshcombo)
        self.CB_CName.currentIndexChanged.connect(self.selectCenter)
        self.Route()
        self.CB_RName.highlighted[str].connect(self.refreshcombo1)
        self.CB_RName.currentIndexChanged.connect(self.selectRoute)

    def retranslateUi(self, DataMchnInfo):
        _translate = QtCore.QCoreApplication.translate
        DataMchnInfo.setWindowTitle(_translate("DataMchnInfo", "DataMchn Info"))
        self.label_CCode.setText(_translate("DataMchnInfo", "Center Code :"))
        self.lineEdit_CCode.setPlaceholderText(_translate("DataMchnInfo", "New"))
        self.labelRCode.setText(_translate("DataMchnInfo", "Route Code :"))
        self.labelDCode.setText(_translate("DataMchnInfo", "DataMchn Code :"))
        self.lineEdit_RCode.setPlaceholderText(_translate("DataMchnInfo", "New"))
        self.lineEdit_DCode.setPlaceholderText(_translate("DataMchnInfo", "New"))
        self.lineEdit_DName.setPlaceholderText(_translate("DataMchnInfo", "Name"))
        self.btnAdd.setText(_translate("DataMchnInfo", "Add"))
        self.btnModify.setText(_translate("DataMchnInfo", "Modify"))
        self.btnSave.setText(_translate("DataMchnInfo", "Save"))
        self.btnDelete.setText(_translate("DataMchnInfo", "Delete"))
        self.btnExit.setText(_translate("DataMchnInfo", "Exit"))
        self.labelHeding.setText(_translate("DataMchnInfo", "Data Machine"))
        self.labelList.setText(_translate("DataMchnInfo", "List"))
        self.lineEdit_Search.setPlaceholderText(_translate("DataMchnInfo", "Search"))

        self.listWidget.clicked.connect(self.selectionChanged)
        self.lineEdit_Search.textChanged.connect(self.filterlist)
        self.btnDelete.clicked.connect(self.Delete_data)
        self.btnAdd.clicked.connect(self.add_data)
        self.btnSave.clicked.connect(self.save_data)
        self.btnModify.clicked.connect(self.Update_data)
        self.btnExit.clicked.connect(QtWidgets.qApp.quit)

    def save_data(self):
        self.lineEdit_DName.setFocus(True)
        lineEdit_DCode = self.lineEdit_DCode.text()
        Code=self.listWidget.count()
        if Code==0:
            Code=1
        else:
            Code=Code+1
        lineEdit_DName = self.lineEdit_DName.text()
        if lineEdit_DCode=='' and lineEdit_DName== '':
            # Create the dialog without running it yet
            msgBox = QMessageBox()

                # Set the various texts
            msgBox.setWindowTitle("Information")
            msgBox.setText(
                    "No entry '" + str(lineEdit_DCode) + " " + str(lineEdit_DName) + "'.Would you like to add it to the database")
            msgBox.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
            msgBox.setDefaultButton(QMessageBox.No)

                # Run the dialog, and check results
            bttn = msgBox.exec_()
            if bttn == QMessageBox.Yes:
                 return True
            else:
                 return False
        else:
            conn = sqlite3.connect('D:\Internship\ERP_Info\ERP_Info.db')
            cur = conn.cursor()
            cur.execute('INSERT INTO DataMchnDB (DCode,DName) \
                                    VALUES (?,?)', (Code, lineEdit_DName))

            conn.commit()
            print("Records Inserted successfully")
            conn.close()
            self.View_data()
            self.lineEdit_DName.clear()
            self.lineEdit_DCode.clear()
            self.lineEdit_DName.setFocus()


    def filterlist(self):
        self.listWidget.clear()

    def add_data(self):
        self.lineEdit_DName.setEnabled(True)
        self.lineEdit_DName.setFocus()
        lastcode = self.listWidget.count()
        code = lastcode + 1
        print(code)
        self.lineEdit_DCode.setText(str(code))

    def View_data(self):

        conn = sqlite3.connect('D:\Internship\ERP_Info\ERP_Info.db')
        cur = conn.cursor()

        cur.execute('select DName from DataMchnDB')
        hu = cur.fetchall()
        self.listWidget.clear()
        for i in range(len(hu)):
            item = QtWidgets.QListWidgetItem(hu[i][0])
            self.listWidget.addItem(item)

        conn.commit()
        print("Records Displayed successfully")
        conn.close()

    def Update_data(self):
        self.lineEdit_DName.setEnabled(True)
        lineEdit_DCode = self.lineEdit_DCode.text()
        lineEdit_DName = self.lineEdit_DName.text()
        conn = sqlite3.connect('D:\Internship\ERP_Info\ERP_Info.db')
        cur = conn.cursor()
        cur.execute("UPDATE DataMchnDB SET DName = ? WHERE DCode = ?", (lineEdit_DName,lineEdit_DCode))

        conn.commit()
        print("Records Modified successfully")
        conn.close()
        self.View_data()

    def Delete_data(self):
        self.lineEdit_DCode.setFocus()
        lineEdit_DCode= self.lineEdit_DCode.text()
        conn = sqlite3.connect('D:\Internship\ERP_Info\ERP_Info.db')
        cur = conn.cursor()
        cur.execute("DELETE FROM DataMchnDB WHERE DCode=?", (lineEdit_DCode))
        conn.commit()
        print("Records Deleted successfully")
        conn.close()
        self.View_data()
        self.lineEdit_DName.clear()
        self.lineEdit_DCode.clear()

    def selectionChanged(self):
        self.lineEdit_DName.setEnabled(False)
        name = self.listWidget.currentItem()
        cname = (name.text())
        self.lineEdit_DName.setText(name.text())
        conn = sqlite3.connect('D:\Internship\ERP_Info\ERP_Info.db')
        cur = conn.cursor()
        cur.execute("SELECT DCode FROM DataMchnDB WHERE DName=?", (cname,))
        result = cur.fetchone()
        # print(result)
        # print(type(result))
        res = int(''.join(map(str, result)))
        self.lineEdit_DCode.setText(str(res))
        conn.commit()
        # print("Code Displayed successfully")
        conn.close()

    def selectCenter(self):
            name = self.CB_CName.currentText()
            index = self.CB_CName.currentIndex()

            conn = sqlite3.connect('D:\Internship\ERP_Info\ERP_Info.db')
            cur = conn.cursor()
            cur.execute("SELECT Code FROM CenterDB WHERE Name=?", (name,))
            result = cur.fetchone()
            res = int(''.join(map(str, result)))
            self.lineEdit_CCode.setText(str(res))
            conn.commit()
            conn.close()

    def Center(self):
            conn = sqlite3.connect('D:\Internship\ERP_Info\ERP_Info.db')
            c = conn.cursor()
            c.execute("SELECT Name FROM CenterDB")
            List = c.fetchall()
            #print(List)
            self.CB_CName.clear()
            for i in range(len(List)):
                    self.CB_CName.addItem(List[i][0])
                    #print(row)
            conn.commit()
            conn.close()

    def refreshcombo(self):
            count=self.CB_CName.count()
            conn = sqlite3.connect('D:\Internship\ERP_Info\ERP_Info.db')
            cur = conn.cursor()
            cur.execute('SELECT * FROM CenterDB')
            result = cur.fetchall()
            #print(len(result))
            conn.commit()
            conn.close()
            a=count
            b=len(result)
            #print(result)
            if a!= b:
                    self.Center()
                    return



    def selectRoute(self):
            name = self.CB_RName.currentText()
            index = self.CB_RName.currentIndex()

            conn = sqlite3.connect('D:\Internship\ERP_Info\ERP_Info.db')
            cur = conn.cursor()
            cur.execute("SELECT Code FROM RouteDB WHERE Name=?", (name,))
            result = cur.fetchone()
            res = int(''.join(map(str, result)))
            self.lineEdit_RCode.setText(str(res))
            conn.commit()
            conn.close()

    def Route(self):
            conn = sqlite3.connect('D:\Internship\ERP_Info\ERP_Info.db')
            c = conn.cursor()
            c.execute("SELECT Name FROM RouteDB")
            List = c.fetchall()
            #print(List)
            self.CB_RName.clear()
            for i in range(len(List)):
                    self.CB_RName.addItem(List[i][0])
                    #print(row)
            conn.commit()
            conn.close()

    def refreshcombo1(self):
            count=self.CB_RName.count()
            conn = sqlite3.connect('D:\Internship\ERP_Info\ERP_Info.db')
            cur = conn.cursor()
            cur.execute('SELECT * FROM RouteDB')
            result = cur.fetchall()
            #print(len(result))
            conn.commit()
            conn.close()
            a=count
            b=len(result)
            #print(result)
            if a!= b:
                    self.Route()
                    return


if __name__=="__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    widget = QtWidgets.QWidget()
    ui = Ui_DataMchnInfo()
    ui.setupUi(widget)
    widget.show()
    sys.exit(app.exec_())